------------------------------------------------
2
-- This file is part of the luci-app-ssr-plus subscribe.lua
3
-- @author William Chan <root@williamchan.me>
4
-- 2020/03/15 by chongshengB
5
------------------------------------------------
6
require 'nixio'
7
local cjson = require "cjson"
8
-- these global functions are accessed all the time by the event handler
9
-- so caching them is worth the effort
10
local luci = luci
11
local tinsert = table.insert
12
local ssub, slen, schar, sbyte, sformat, sgsub = string.sub, string.len, string.char, string.byte, string.format, string.gsub
13
local b64decode = nixio.bin.b64decode
14
local cache = {}
15
local nodeResult = setmetatable({}, { __index = cache })  -- update result
16
local name = 'shadowsocksr'
17
local uciType = 'servers'
18
local subscribe_url = {}
19
local i = 1
20

 
SSP:Add keyword filter 
3 months ago
 
21
local tfilter_words = io.popen("echo -n `nvram get ss_keyword`")
22
local filter_words = tfilter_words:read("*all")
23

 
SSP:update 
4 months ago

24
for line in io.lines("/tmp/dlist.txt") do
25
print(line)
26
subscribe_url[i] = line
27
i = i+1
28
end
29

30
local function base64Decode(text)
31
	local raw = text
32
	if not text then return '' end
33
	text = text:gsub("%z", "")
34
	text = text:gsub("_", "/")
35
	text = text:gsub("-", "+")
36
	local mod4 = #text % 4
37
	text = text .. string.sub('====', mod4 + 1)
38
	local result = b64decode(text)
39

40
	if result then
41
		return result:gsub("%z", "")
42
	else
43
		return raw
44
	end
45
end
46

47
local log = function(...)
48
	print(os.date("%Y-%m-%d %H:%M:%S ") .. table.concat({ ... }, " "))
49
	os.execute("logger -t 'SS' '" .. table.concat({ ... }, " ") .. "'")
50
end
51
-- 分割字符串
52
local function split(full, sep)
53
	full = full:gsub("%z", "")  -- 这里不是很清楚 有时候结尾带个\0
54
	local off, result = 1, {}
55
	while true do
56
		local nStart, nEnd = full:find(sep, off)
57
		if not nEnd then
58
			local res = ssub(full, off, slen(full))
59
			if #res > 0 then -- 过滤掉 \0
60
				tinsert(result, res)
61
			end
62
			break
63
		else
64
			tinsert(result, ssub(full, off, nStart - 1))
65
			off = nEnd + 1
66
		end
67
	end
68
	return result
69
end
70
-- urlencode
71
local function get_urlencode(c)
72
	return sformat("%%%02X", sbyte(c))
73
end
74

75
local function urlEncode(szText)
76
	local str = szText:gsub("([^0-9a-zA-Z ])", get_urlencode)
77
	str = str:gsub(" ", "+")
78
	return str
79
end
80

81
local function get_urldecode(h)
82
	return schar(tonumber(h, 16))
83
end
84
local function UrlDecode(szText)
85
	return szText:gsub("+", " "):gsub("%%(%x%x)", get_urldecode)
86
end
87

88
-- trim
89
local function trim(text)
90
	if not text or text == "" then
91
		return ""
92
	end
93
	return (sgsub(text, "^%s*(.-)%s*$", "%1"))
94
end
95
-- md5
96
local function md5(content)
97
	local stdout = io.popen("echo -n '" .. urlEncode(content) .. "'|md5sum|cut -d ' ' -f1")
98
	local stdout2 = stdout:read("*all")
99
	-- assert(nixio.errno() == 0)
100
	return trim(stdout2)
101
	--print(stdout)
102
	--return stdout
103
end
104
-- 处理数据
105
local function processData(szType, content)
106

107
	local result = {
108
	type = szType,
109
	local_port = 1234,
110
	kcp_param = '--nocomp'
111
	}
112
	if szType == 'ssr' then
113
		local dat = split(content, "/%?")
114
		local hostInfo = split(dat[1], ':')
115
		result.server = hostInfo[1]
116
		result.server_port = hostInfo[2]
117
		result.protocol = hostInfo[3]
118
		result.encrypt_method = hostInfo[4]
119
		result.obfs = hostInfo[5]
120
		result.password = base64Decode(hostInfo[6])
121
		local params = {}
122
		for _, v in pairs(split(dat[2], '&')) do
123
			local t = split(v, '=')
124
			params[t[1]] = t[2]
125
		end
126
		result.obfs_param = base64Decode(params.obfsparam)
127
		result.protocol_param = base64Decode(params.protoparam)
128
		local group = base64Decode(params.group)
129
		if group then
130
			result.alias = "["  .. group .. "] "
131
		end
132
		result.alias = result.alias .. base64Decode(params.remarks)
133
	elseif szType == 'vmess' then
134
	local content2 = "[[" .. content .. "]]"
135
		local info = cjson.decode(content)
136
        result.type = 'v2ray'
137
		result.server = info.add
138
		result.server_port = info.port
139
		result.transport = info.net
140
		result.alter_id = info.aid
141
		result.vmess_id = info.id
142
		result.alias = info.ps
143
		result.network = info.net
144
		-- result.mux = 1
145
		-- result.concurrency = 8
146
		if info.net == 'ws' then
147
			result.ws_host = info.host
148
			result.ws_path = info.path
149
		end
150
		if info.net == 'h2' then
151
			result.h2_host = info.host
152
			result.h2_path = info.path
153
		end
154
		if info.net == 'tcp' then
 
SSP:Add keyword filter 
3 months ago
 
155
			if info.type and info.type ~= "http" then
156
				info.type = "none"
157
			end
 
SSP:update 
4 months ago

158
			result.tcp_guise = info.type
159
			result.http_host = info.host
160
			result.http_path = info.path
161
		end
162
		if info.net == 'kcp' then
163
			result.kcp_guise = info.type
164
			result.mtu = 1350
165
			result.tti = 50
166
			result.uplink_capacity = 5
167
			result.downlink_capacity = 20
168
			result.read_buffer_size = 2
169
			result.write_buffer_size = 2
170
		end
171
		if info.net == 'quic' then
172
			result.quic_guise = info.type
173
			result.quic_key = info.key
174
			result.quic_security = info.securty
175
		end
176
		if info.security then
177
			result.security = info.security
178
		end
179
		if info.tls == "tls" or info.tls == "1" then
180
			result.tls = "1"
181
			result.tls_host = info.host
 
SSP:Add keyword filter 
3 months ago
 
182
			result.insecure = 1
 
SSP:update 
4 months ago

183
		else
184
			result.tls = "0"
185
		end
186
	elseif szType == "ss" then
187
		local idx_sp = 0
188
		local alias = ""
189
		if content:find("#") then
190
			idx_sp = content:find("#")
191
			alias = content:sub(idx_sp + 1, -1)
192
		end
193
		local info = content:sub(1, idx_sp - 1)
194
		local hostInfo = split(base64Decode(info), "@")
195
		local host = split(hostInfo[2], ":")
196
		local userinfo = base64Decode(hostInfo[1])
197
		local method = userinfo:sub(1, userinfo:find(":") - 1)
198
		local password = userinfo:sub(userinfo:find(":") + 1, #userinfo)
199
		result.alias = UrlDecode(alias)
200
		result.type = "ss"
201
		result.server = host[1]
202
		if host[2]:find("/%?") then
203
			local query = split(host[2], "/%?")
204
			result.server_port = query[1]
205
			local params = {}
206
			for _, v in pairs(split(query[2], '&')) do
207
				local t = split(v, '=')
208
				params[t[1]] = t[2]
209
			end
210
			if params.plugin then
211
				local plugin_info = UrlDecode(params.plugin)
212
				local idx_pn = plugin_info:find(";")
213
				if idx_pn then
214
					result.plugin = plugin_info:sub(1, idx_pn - 1)
215
					result.plugin_opts = plugin_info:sub(idx_pn + 1, #plugin_info)
216
				else
217
					result.plugin = plugin_info
218
				end
219
			end
220
		else
221
			result.server_port = host[2]
222
		end
223
		result.encrypt_method_ss = method
224
		result.password = password
225
	elseif szType == "ssd" then
226
		result.type = "ss"
227
		result.server = content.server
228
		result.server_port = content.port
229
		result.password = content.password
230
		result.encrypt_method_ss = content.encryption
231
		result.plugin = content.plugin
232
		result.plugin_opts = content.plugin_options
233
		result.alias = "[" .. content.airport .. "] " .. content.remarks
234
	elseif szType == "trojan" then
235
		local idx_sp = 0
236
		local alias = ""
237
		if content:find("#") then
238
			idx_sp = content:find("#")
239
			alias = content:sub(idx_sp + 1, -1)
240
		end
241
		local info = content:sub(1, idx_sp - 1)
242
		local hostInfo = split(info, "@")
243
		local host = split(hostInfo[2], ":")
244
		local userinfo = hostInfo[1]
245
		local password = userinfo
246
		result.alias = UrlDecode(alias)
247
		result.type = "trojan"
248
		result.server = host[1]
249
		-- 按照官方的建议 默认验证ssl证书
250
		result.insecure = "0"
251
		result.tls = "1"
252
		if host[2]:find("?") then
253
			local query = split(host[2], "?")
254
			result.server_port = query[1]
255
			local params = {}
256
			for _, v in pairs(split(query[2], '&')) do
257
				local t = split(v, '=')
258
				params[t[1]] = t[2]
259
			end
260

261
			if params.peer then
262
				-- 未指定peer（sni）默认使用remote addr
263
				result.tls_host = params.peer
264
			end
265

266
			if params.allowInsecure == "1" then
267
				result.insecure = "1"
268
			else
269
				result.insecure = "0"
270
			end
271
		else
272
			result.server_port = host[2]
273
		end
274
		result.password = password
275
	end
276
	if not result.alias then
277
		result.alias = result.server .. ':' .. result.server_port
278
	end
279
	-- alias 不参与 hashkey 计算
280
	local alias = result.alias
281
	result.alias = nil
282
	local switch_enable = result.switch_enable
283
	result.switch_enable = nil
284
	--print(cjson.encode(result))
285
	result.hashkey = md5(cjson.encode(result))
286
	print(result.hashkey)
287
	result.alias = alias
288
	result.switch_enable = switch_enable
289
	return result
290
end
291
-- wget
292
local function wget(url)
 
Update dlink.lua 
1 hour ago
 
293
	local stdout = io.popen('curl -k -s --connect-timeout 15 --retry 5 "' .. url .. '"--user-agent "Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/31.0.1650.63 Safari/537.36"')
 
SSP:update 
4 months ago

294
	local sresult = stdout:read("*all")
295
    return trim(sresult)
296
end
297

 
SSP:Add keyword filter 
3 months ago
 
298
local function check_filer(result)
299
	do
300
		local filter_word = split(filter_words, "/")
301
		print(cjson.encode(filter_word))
302
		for i, v in pairs(filter_word) do
303
			if result.alias:find(v) then
304
				log('订阅节点关键字过滤:“' .. v ..'” ，该节点被丢弃')
305
				return true
306
			end
307
		end
308
	end
309
end
310

 
SSP:update 
4 months ago

311
--local execute = function()
312
	-- exec
313
	local add, del = 0, 0
314
	do
315
		for k, url in ipairs(subscribe_url) do
316
			local raw = wget(url)
317

318
			if #raw > 0 then
319
				local nodes, szType
320
				local groupHash = md5(url)
321
				cache[groupHash] = {}
322
				tinsert(nodeResult, {})
323
				local index = #nodeResult
 
SSP:Add keyword filter 
3 months ago
 
324
				-- SSD 似乎是这种格式 ssd:// 开头的
 
SSP:update 
4 months ago

325
				if raw:find('ssd://') then
326
					szType = 'ssd'
327
					local nEnd = select(2, raw:find('ssd://'))
328
					nodes = base64Decode(raw:sub(nEnd + 1, #raw))
329
					nodes = jsonParse(nodes)
330
					local extra = {
331
						airport = nodes.airport,
332
						port = nodes.port,
333
						encryption = nodes.encryption,
334
						password = nodes.password
335
					}
336
					local servers = {}
337
					-- SS里面包着 干脆直接这样
338
					for _, server in ipairs(nodes.servers) do
339
						tinsert(servers, setmetatable(server, { __index = extra }))
340
					end
341
					nodes = servers
342
				else
343
					-- ssd 外的格式
 
SSP:Add keyword filter 
3 months ago
 
344
					nodes = split(base64Decode(raw):gsub(" ", "_"), "\n")
 
SSP:update 
4 months ago

345
				end
346
				for _, v in ipairs(nodes) do
347
					if v then
348
						local result
349
						if szType == 'ssd' then
350
							result = processData(szType, v)
351
						elseif not szType then
352
							local node = trim(v)
353
							local dat = split(node, "://")
354
							if dat and dat[1] and dat[2] then
 
SSP:Add keyword filter 
3 months ago
 
355
								local dat3 = ""
356
								if dat[3] then
357
									dat3 = "://" .. dat[3]
358
								end
 
SSP:update 
4 months ago

359
								if dat[1] == 'ss' or dat[1] == 'trojan' then
 
SSP:Add keyword filter 
3 months ago
 
360
									result = processData(dat[1], dat[2] .. dat3)
 
SSP:update 
4 months ago

361
								else
362
									result = processData(dat[1], base64Decode(dat[2]))
363
								end
364
							end
365
						else
366
							log('跳过未知类型: ' .. szType)
367
						end
368
						if result then
 
SSP:Add keyword filter 
3 months ago
 
369
							if
 
SSP:update 
4 months ago

370
								not result.server or
 
SSP:Add keyword filter 
3 months ago
 
371
								not result.server_port or
372
								check_filer(result) or
 
SSP:update 
4 months ago

373
								result.server:match("[^0-9a-zA-Z%-%.%s]") -- 中文做地址的 也没有人拿中文域名搞，就算中文域也有Puny Code SB 机场
374
							then
375
								log('丢弃无效节点: ' .. result.type ..' 节点, ' .. result.alias)
376
							else
377
								log('成功解析: ' .. result.type ..' 节点, ' .. result.alias)
378
								result.grouphashkey = groupHash
379
								tinsert(nodeResult[index], result)
380
								cache[groupHash][result.hashkey] = nodeResult[index][#nodeResult[index]]
381
							end
382
						end
383
					end
384
				end
385
				log('成功解析节点数量: ' ..#nodes)
386
			else
387
				log(url .. ': 获取内容为空')
388
			end
389
		end
390
	end
391
	-- diff
392
	do
393
		if next(nodeResult) == nil then
394
			log("更新失败，没有可用的节点信息")
395
			return
396
		end
397

398
		local add, del = 0, 0
399
		for line in io.lines("/tmp/dlinkold.txt") do
400
		newline = line
401
		local olddb = io.popen("dbus get ssconf_basic_json_" ..line)
402
		local old = olddb:read("*all")
403
		--print(#old)
404
		if #old > 1 then
405
		old = cjson.decode(old)
406
				if old.grouphashkey or old.hashkey then -- 没有 hash 的不参与删除
407
					if not nodeResult[old.grouphashkey] or not nodeResult[old.grouphashkey][old.hashkey] then
408
						io.popen("dbus remove ssconf_basic_json_" ..i)
409
						del = del + 1
410
					else
411
						local dat = nodeResult[old.grouphashkey][old.hashkey]
412
						-- 标记一下
413
						setmetatable(nodeResult[old.grouphashkey][old.hashkey], { __index =  { _ignore = true } })
414
					end
415
				else
416
					if not old.coustom then
417
						old.alias = old.server .. ':' .. old.server_port
418
					end
419
					log('忽略手动添加的节点: ' .. old.alias)
420
				end
421

422
			end
423
		end
424
		local ssrindext = io.popen('dbus list ssconf_basic_|grep _json_ | cut -d "=" -f1|cut -d "_" -f4|sort -rn|head -n1')
425
		local ssrindex = ssrindext:read("*all")
426
		if #ssrindex == 0 then
427
			ssrindex = 1
428
		else
429
		ssrindex = tonumber(ssrindex) + 1
430
		end
431

432
		for k, v in ipairs(nodeResult) do
433
			for kk, vv in ipairs(v) do
 
SSP:Add keyword filter 
3 months ago
 
434
				if not vv._ignore then				
 
SSP:update 
4 months ago

435
					io.popen("dbus set ssconf_basic_json_" .. ssrindex .. "='" .. cjson.encode(vv) .. "'")
436
					ssrindex = ssrindex + 1
437
					add = add + 1
438

439
				end
440
			end
441
		end
442
		log('新增节点数量: ' .. add, '删除节点数量: ' .. del)
443
		log('订阅更新成功')
444
		end
